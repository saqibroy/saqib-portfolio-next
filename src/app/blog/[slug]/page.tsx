// Types for contentlayer are generated by Contentlayer
import { allPosts, Post } from 'contentlayer/generated';
import { format } from 'date-fns';
import Layout from '@/components/Layout';
import Image from 'next/image';
import MDXContent from '@/components/MDXContent';
import { Calendar, Clock, User, Tag, ArrowLeft } from 'lucide-react';
import Link from 'next/link';
import AudioSummaryPlayer from "./AudioSummaryPlayer";
import { GiscusComments, SocialShareButtons, StickySocialActions, AIFeaturesBanner } from './ClientComponents';
// Import the new utility function
import { getOptimizedImageProps } from '@/utils/imageOptimization'; // Adjust path if different

export async function generateStaticParams() {
  return allPosts.map((post: Post) => ({ slug: post.slug }));
}

export async function generateMetadata({ params }: { params: { slug: string } }) {
  const post = allPosts.find((post: Post) => post.slug === params.slug);
  if (!post) return {
    title: 'Post Not Found',
    description: 'The requested blog post could not be found.'
  };

  const title = `${post.title} | Saqib Sohail`;
  const description = post.description || 'Read this article on ssohail.com';
  const url = `https://ssohail.com/blog/${post.slug}`;
  // Ensure imageUrl here also uses the optimized image path for OpenGraph,
  // though Contentlayer might need the original path for generation.
  // For static OG images, you might pre-generate them or handle differently.
  const imageUrl = post.image || `https://ssohail.com/og-image.png`;

  return {
    title,
    description,
    openGraph: {
      title,
      description,
      url,
      siteName: 'Saqib Sohail',
      images: [
        {
          url: imageUrl, // Use original path for metadata if it's external, or pre-generated OG image
          width: 1200,
          height: 630,
          alt: post.title,
        },
      ],
      locale: 'en_US',
      type: 'article',
      authors: post.author ? [post.author] : undefined,
      publishedTime: post.date,
    },
    twitter: {
      card: 'summary_large_image',
      title,
      description,
      images: [imageUrl],
      creator: '@ssohail',
      site: '@ssohail',
    },
    alternates: {
      canonical: url,
    },
  };
}

export default function PostPage({
  params,
}: {
  params: { slug: string };
}) {
  const post = allPosts.find((post: Post) => post.slug === params.slug);

  if (!post) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <h1 className="text-4xl font-bold text-white mb-4">Post Not Found</h1>
            <p className="text-gray-400 mb-8">The requested blog post could not be found.</p>
            <Link href="/blog" className="inline-flex items-center gap-2 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
              <ArrowLeft className="w-4 h-4" />
              Back to Blog
            </Link>
          </div>
        </div>
      </Layout>
    );
  }

  // Function to get author initials
  const getAuthorInitials = (authorName: string) => {
    return authorName
      .split(' ')
      .map(name => name.charAt(0).toUpperCase())
      .join('');
  };

  // Function to estimate reading time
  const estimateReadingTime = (content: string) => {
    const wordsPerMinute = 200;
    const wordCount = content.split(/\s+/).length;
    const minutes = Math.ceil(wordCount / wordsPerMinute);
    return `${minutes} min read`;
  };

  const currentUrl = `https://ssohail.com/blog/${post.slug}`;

  // Get optimized image props for the hero image
  const heroImageProps = post.image ? getOptimizedImageProps({
    src: post.image,
    alt: post.title,
    width: 1200, // Assuming original or largest intended width
    height: 675, // Assuming original or largest intended height (16:9 aspect ratio)
    // Adjust sizes for hero image based on its typical display size on post pages
    sizes: "(max-width: 768px) 100vw, 80vw", // Example: 100vw on mobile, 80vw on larger screens
    priority: true, // This is a hero image, likely LCP, so prioritize it
    className: "object-cover object-center"
  }) : null;


  return (
    <Layout>
      {/* Sticky Social Actions (Desktop only, mobile uses floating button) */}
      <StickySocialActions
        postSlug={post.slug}
        currentUrl={currentUrl}
        postTitle={post.title}
        postDescription={post.description}
      />

      {/* Hero Section */}
      <section className="relative pt-24 pb-12 sm:pb-16">
        {/* Background Pattern */}
        <div className="absolute inset-0 bg-gradient-to-br from-blue-900/20 via-transparent to-green-900/20 pointer-events-none" />
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_20%_20%,rgba(59,130,246,0.1),transparent)] pointer-events-none" />

        <div className="container mx-auto px-4 py-8">
          {/* Breadcrumb */}
          <nav className="flex items-center gap-2 mb-6 sm:mb-8 text-sm">
            <Link href="/" className="text-gray-400 hover:text-white transition-colors">
              Home
            </Link>
            <span className="text-gray-600">/</span>
            <Link href="/blog" className="text-gray-400 hover:text-white transition-colors">
              Blog
            </Link>
            <span className="text-gray-600">/</span>
            <span className="text-white">{post.title}</span>
          </nav>

          {/* AI Features Banner */}
          <AIFeaturesBanner />

          {/* Hero Content */}
          <div className="text-center mb-8 sm:mb-12">
            <h1 className="text-3xl md:text-5xl lg:text-6xl font-black mb-4 sm:mb-6 leading-tight">
              <span className="bg-gradient-to-r from-blue-400 via-purple-400 to-green-400 bg-clip-text text-transparent">
                {post.title}
              </span>
            </h1>
            {post.description && (
              <p className="text-lg md:text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed px-2 sm:px-0">
                {post.description}
              </p>
            )}
          </div>

          {/* Meta Information */}
          <div className="flex flex-wrap items-center justify-center gap-x-4 gap-y-2 mb-8 sm:mb-12 text-gray-400 text-sm">
            <div className="flex items-center gap-2">
              <Calendar className="w-4 h-4" />
              <time dateTime={post.date}>
                {format(new Date(post.date), 'MMMM d,yyyy')}
              </time>
            </div>
            <div className="flex items-center gap-2">
              <Clock className="w-4 h-4" />
              <span>{estimateReadingTime(post.body.raw)}</span>
            </div>
            {post.author && (
              <div className="flex items-center gap-2">
                <User className="w-4 h-4" />
                <span>{post.author}</span>
              </div>
            )}
          </div>

          {/* Hero Image */}
          {heroImageProps && ( // Check if imageProps exist
            <div className="relative aspect-[16/9] w-full rounded-xl sm:rounded-2xl overflow-hidden shadow-2xl mb-8 sm:mb-12">
              <div className="absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent z-10" />
              <Image {...heroImageProps} fill /> {/* Spread the generated props directly */}
            </div>
          )}
          {/* Fallback for cases where post.image is not present or optimization issues */}
          {!heroImageProps && (
              <div className="relative aspect-[16/9] w-full rounded-xl sm:rounded-2xl overflow-hidden shadow-2xl mb-8 sm:mb-12 bg-gray-700 flex items-center justify-center text-gray-400 text-lg">
                  No Image Available
              </div>
          )}

          {/* Tags */}
          {post.tags && post.tags.length > 0 && (
            <div className="flex flex-wrap justify-center gap-2 sm:gap-3 mb-12 sm:mb-16 px-4">
              {post.tags.map((tag: string) => (
                <span
                  key={tag}
                  className="group inline-flex items-center gap-2 px-4 py-2 sm:px-6 sm:py-3 rounded-full text-xs sm:text-sm font-medium bg-gray-900/50 text-gray-300 ring-1 ring-gray-700 hover:ring-blue-500 hover:bg-blue-900/20 transition-all duration-300 backdrop-blur-sm"
                >
                  <Tag className="w-3 h-3 sm:w-4 sm:h-4" />
                  {tag}
                </span>
              ))}
            </div>
          )}

          {/* Audio Summary Section */}
          <div id="audio-summary" className="my-8 sm:my-16">
            <AudioSummaryPlayer postContent={post.body.raw} postTitle={post.title} />
          </div>
        </div>
      </section>

      {/* Article Content */}
      <article className="relative">
        <div className="container mx-auto px-4 max-w-4xl xl:max-w-5xl">
          {/* Article Body */}
          <div className="prose prose-invert prose-xl max-w-none xl:max-w-4xl xl:mx-auto prose-headings:font-bold prose-headings:tracking-tight prose-h1:text-4xl prose-h2:text-3xl prose-h3:text-2xl prose-h2:mt-16 prose-h2:mb-8 prose-h3:mt-12 prose-h3:mb-6 prose-p:text-gray-300 prose-p:leading-relaxed prose-p:mb-6 prose-a:text-blue-400 prose-a:no-underline hover:prose-a:underline prose-a:transition-all prose-strong:text-white prose-strong:font-semibold prose-blockquote:border-l-blue-500 prose-blockquote:bg-blue-900/10 prose-blockquote:px-6 prose-blockquote:py-4 prose-blockquote:rounded-r-lg prose-ul:my-8 prose-li:text-gray-300 prose-li:mb-2">
            <MDXContent code={post.body.code} />
          </div>

          {/* Giscus Comments Section */}
          <div id="comments">
            <GiscusComments postSlug={post.slug} postTitle={post.title} />
          </div>

          {/* Author Bio */}
          {post.author && (
            <div className="mt-12 sm:mt-20 mb-8 sm:mb-16 p-4 sm:p-8 rounded-xl sm:rounded-2xl bg-gradient-to-br from-blue-900/20 to-green-900/20 ring-1 ring-gray-700/50 backdrop-blur-sm">
              <div className="flex flex-col sm:flex-row items-center sm:items-start gap-4 sm:gap-6">
                <div className="w-14 h-14 sm:w-16 sm:h-16 rounded-full bg-gradient-to-br from-blue-500 to-green-500 flex items-center justify-center text-white font-bold text-xl flex-shrink-0">
                  {getAuthorInitials(post.author)}
                </div>
                <div className="flex-1 text-center sm:text-left">
                  <h3 className="text-xl font-bold text-white mb-2">{post.author}</h3>
                  <p className="text-blue-300 font-medium mb-3 text-sm">Software Engineer | Full-Stack Developer | SEO Specialist</p>
                  <p className="text-gray-300 leading-relaxed mb-4 text-sm">
                    With over 6 years of experience in software development and digital marketing, I specialize in creating
                    high-performance web applications and implementing effective SEO strategies. Currently based in Berlin,
                    I help businesses optimize their online presence through technical expertise and data-driven approaches.
                  </p>
                  <div className="flex flex-wrap justify-center sm:justify-start gap-3">
                    <a
                      href="https://ssohail.com"
                      target="_blank"
                      rel="noopener"
                      className="inline-flex items-center gap-2 px-3 py-1.5 sm:px-4 sm:py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors font-medium text-sm"
                    >
                      Visit Website
                    </a>
                    <a
                      href="https://github.com/saqibroy"
                      target="_blank"
                      rel="noopener"
                      className="inline-flex items-center gap-2 px-3 py-1.5 sm:px-4 sm:py-2 bg-gray-800 hover:bg-gray-700 text-white rounded-lg transition-colors font-medium ring-1 ring-gray-600 text-sm"
                    >
                      GitHub
                    </a>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </article>
    </Layout>
  );
}

function formatTime(seconds: number) {
  const minutes = Math.floor(seconds / 60);
  const m = minutes.toString().padStart(1, "0");

  const remainingSeconds = Math.floor(seconds % 60);
  const s = remainingSeconds.toString().padStart(2, "0");

  return `${m}:${s}`;
}